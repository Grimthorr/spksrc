diff --git shellinabox/vt100.jspp.old shellinabox/vt100.jspp
index 846a1ef..757ad5f 100755
--- shellinabox/vt100.jspp.old
+++ shellinabox/vt100.jspp
@@ -888,7 +888,7 @@ VT100.prototype.initializeElements = function(container) {
                        '<div class="hidden">' +
                          '<div id="usercss"></div>' +
                          '<pre><div><span id="space"></span></div></pre>' +
-                         '<input type="textfield" id="input" />' +
+                         '<input type="textfield" id="input" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />' +
                          '<input type="textfield" id="cliphelper" />' +
                          (typeof suppressAllAudio != 'undefined' &&
                           suppressAllAudio ? "" :
@@ -1048,6 +1048,24 @@ VT100.prototype.initializeElements = function(container) {
   this.addListener(this.scrollable,'mouseup',  mouseEvent(this, MOUSE_UP));
   this.addListener(this.scrollable,'click',    mouseEvent(this, MOUSE_CLICK));
 
+  // Check that browser supports drag and drop
+  if ('draggable' in document.createElement('span')) {
+      var dropEvent            = function (vt100) {
+          return function(e) {
+              if (!e) e = window.event;
+              if (e.preventDefault) e.preventDefault();
+              vt100.keysPressed(e.dataTransfer.getData('Text'));
+              return false;
+          };
+      };
+      // Tell the browser that we *can* drop on this target
+      this.addListener(this.scrollable, 'dragover', cancel);
+      this.addListener(this.scrollable, 'dragenter', cancel);
+
+      // Add a listener for the drop event
+      this.addListener(this.scrollable, 'drop', dropEvent(this));
+  }
+  
   // Initialize the blank terminal window.
   this.currentScreen           = 0;
   this.cursorX                 = 0;
@@ -1061,6 +1079,13 @@ VT100.prototype.initializeElements = function(container) {
   this.input.focus();
 };
 
+function cancel(event) {
+  if (event.preventDefault) {
+    event.preventDefault();
+  }
+  return false;
+}
+
 VT100.prototype.getChildById = function(parent, id) {
   var nodeList = parent.all || parent.getElementsByTagName('*');
   if (typeof nodeList.namedItem == 'undefined') {
@@ -1101,13 +1126,13 @@ VT100.prototype.repairElements = function(console) {
   for (var line = console.firstChild; line; line = line.nextSibling) {
     if (!line.clientHeight) {
       var newLine = document.createElement(line.tagName);
-      newLine.style.cssText       = line.style.cssText;
-      newLine.className           = line.className;
+      newLine.style.cssText     = line.style.cssText;
+      newLine.className         = line.className;
       if (line.tagName == 'DIV') {
         for (var span = line.firstChild; span; span = span.nextSibling) {
-          var newSpan             = document.createElement(span.tagName);
-          newSpan.style.cssText   = span.style.cssText;
-          newSpan.style.className = span.style.className;
+          var newSpan           = document.createElement(span.tagName);
+          newSpan.style.cssText = span.style.cssText;
+          newSpan.className     = span.className;
           this.setTextContent(newSpan, this.getTextContent(span));
           newLine.appendChild(newSpan);
         }
@@ -1509,25 +1534,25 @@ VT100.prototype.insertBlankLine = function(y, color, style) {
   // not add any missing lines in between. It is the caller's responsibility
   // to do so.
   if (!color) {
-    color                = 'ansi0 bgAnsi15';
+    color              = 'ansi0 bgAnsi15';
   }
   if (!style) {
-    style                = '';
+    style              = '';
   }
   var line;
   if (color != 'ansi0 bgAnsi15' && !style) {
-    line                 = document.createElement('pre');
+    line               = document.createElement('pre');
     this.setTextContent(line, '\n');
   } else {
-    line                 = document.createElement('div');
-    var span             = document.createElement('span');
-    span.style.cssText   = style;
-    span.style.className = color;
+    line               = document.createElement('div');
+    var span           = document.createElement('span');
+    span.style.cssText = style;
+    span.className     = color;
     this.setTextContent(span, this.spaces(this.terminalWidth));
     line.appendChild(span);
   }
-  line.style.height      = this.cursorHeight + 'px';
-  var console            = this.console[this.currentScreen];
+  line.style.height    = this.cursorHeight + 'px';
+  var console          = this.console[this.currentScreen];
   if (console.childNodes.length > y) {
     console.insertBefore(line, console.childNodes[y]);
   } else {
@@ -2338,6 +2363,13 @@ VT100.prototype.pasteFnc = function() {
   }
 };
 
+VT100.prototype.pasteBrowserFnc = function() {
+  var clipboard     = prompt("Paste into this box:","");
+  if (clipboard != undefined) {
+     return this.keysPressed('' + clipboard);
+  }
+};
+
 VT100.prototype.toggleUTF = function() {
   this.utfEnabled   = !this.utfEnabled;
 
@@ -2447,6 +2479,7 @@ VT100.prototype.showContextMenu = function(x, y) {
         '<ul id="menuentries">' +
           '<li id="beginclipboard">Copy</li>' +
           '<li id="endclipboard">Paste</li>' +
+          '<li id="browserclipboard">Paste from browser</li>' +
           '<hr />' +
           '<li id="reset">Reset</li>' +
           '<hr />' +
@@ -2491,7 +2524,7 @@ VT100.prototype.showContextMenu = function(x, y) {
   }
 
   // Actions for default items
-  var actions                 = [ this.copyLast, p, this.reset,
+  var actions                 = [ this.copyLast, p, this.pasteBrowserFnc, this.reset,
                                   this.toggleUTF, this.toggleBell,
                                   this.toggleSoftKeyboard,
                                   this.toggleDisableAlt,
